@attribute [Route(Routes.LightningReceive)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Data
@using BTCPayApp.Core.LDK
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Features
@using BTCPayServer.Lightning
@using NBitcoin
@using NBitcoin.Crypto
@inject IState<RootState> State
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject LightningNodeManager LightningNodeManager
@inject IDispatcher Dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Receive</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Receive</h1>
    </Titlebar>
</SectionContent>

<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (State.Value.LightningNodeState is LightningNodeState.Loaded)
            {
                <h4 class="mb-4">Request payment</h4>
                <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="GenerateInvoice" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage">
                    <DataAnnotationsValidator/>

                    @if (!string.IsNullOrEmpty(_paymentRequest))
                    {
                        <div class="form-group form-floating">
                            <TruncateCenter Text="@_paymentRequest" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                            <label>Payment Request</label>
                        </div>
                    }

                    <div class="form-group">
                        <label for="Amount" class="form-label" data-required>Amount</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="Model.Amount" id="Amount" class="form-control" inputmode="numeric" min="0"/>
                            <span class="input-group-text">sats</span>
                        </div>
                        <ValidationMessage For="@(() => Model.Amount)"/>
                    </div>
                    <button type="submit" class="btn btn-primary" disabled="@(_validationEditContext!.Invalid || _invoiceGenerating)">
                        @if (_invoiceGenerating)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Generate Invoice</span>
                        }
                    </button>
                </ValidationEditContext>

                <article class="my-5">
                    <h4 class="mb-4">Invoices</h4>
                    <LightningPaymentList Payments="_invoices" Rate="@Rate" Currency="@DisplayCurrency" Loading="@(PaymentsManager == null)" OnCancelClick="payment => Cancel(payment)" OnToggleDisplayCurrency="ToggleDisplayCurrency"/>
                </article>
                <button class="btn btn-outline-primary" type="button" @onclick="FetchData">Refresh data</button>
            }
            else
            {
                <LightningNodeStateAlert NodeState="State.Value.LightningNodeState" ConnectionState="State.Value.ConnectionState" />
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private ReceiveModel Model { get; set; } = new();

    private ValidationEditContext? _validationEditContext;
    private List<AppLightningPayment>? _invoices;
    private string? _successMessage;
    private string? _errorMessage;
    private string? _paymentRequest;
    private bool _invoiceGenerating;
    private PaymentsManager? PaymentsManager => LightningNodeManager.Node?.PaymentsManager;
    private readonly SemaphoreSlim _semaphore = new(1, 1);
    private string DisplayCurrency => UIState.Value.DisplayCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;

    private class ReceiveModel
    {
        [Required]
        public decimal? Amount { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchData();
    }

    private async Task FetchData()
    {
        if (PaymentsManager is null) return;
        await Wrap(async () =>
        {
            var list = await PaymentsManager.List(payments => payments.Where(p => p.Inbound));
            _invoices = list.OrderByDescending(p => p.Timestamp).ToList();
        });
    }

    private async void GenerateInvoice()
    {
        if (PaymentsManager is null) return;
        _paymentRequest = _successMessage = _errorMessage = null;
        _invoiceGenerating = true;
        await Wrap(async () =>
        {
            try
            {
                var hash = new uint256(Hashes.SHA256(RandomUtils.GetBytes(32)));
                var result = await PaymentsManager.RequestPayment(LightMoney.Satoshis(Model.Amount ?? 0), TimeSpan.FromDays(1), hash);

                _successMessage = "Payment request created";
                _paymentRequest = result.PaymentRequest!.ToString();
                Model = new ReceiveModel();
            }
            catch (Exception e)
            {
                _errorMessage = $"Error: {e.Message}";
            }
        });
        _invoiceGenerating = false;
        await FetchData();
    }

    private async Task Cancel(AppLightningPayment payment)
    {
        if (PaymentsManager is null) return;
        await Wrap(async () =>
        {
            await PaymentsManager.Cancel(payment);
        });
        await FetchData();
    }

    private async Task Wrap(Func<Task> action)
    {
        if (PaymentsManager is null) return;
        try
        {
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();
            await action();
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
            _semaphore.Release();
        }
    }

    private void ToggleDisplayCurrency()
    {
        Dispatcher.Dispatch(new UIState.ToggleDisplayCurrency());
    }
}
