@attribute [Route(Routes.LightningSend)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Data
@using BTCPayApp.Core.LDK
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@using BTCPayServer.Lightning
@using NBitcoin
@inject IState<RootState> State
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject LightningNodeManager LightningNodeManager
@inject IDispatcher Dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Send</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Send</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (State.Value.LightningNodeState is LightningNodeState.Loaded)
            {
                <h4 class="mb-4">Send payment</h4>
                <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="SendPayment" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label for="PaymentRequest" class="form-label" data-required>Payment Request</label>
                        <InputText @bind-Value="Model.PaymentRequest" id="PaymentRequest" class="form-control"/>
                        <ValidationMessage For="@(() => Model.PaymentRequest)"/>
                    </div>
                    <div class="form-group">
                        <label for="Amount" class="form-label" data-required>Amount</label>
                        <InputAmount Id="Amount" @bind-Value="Model.Amount" Unit="@UnitMoney" OnToggleDisplayCurrency="ToggleDisplayCurrency"/>
                        <ValidationMessage For="@(() => Model.Amount)"/>
                    </div>
                    <button type="submit" class="btn btn-primary" disabled="@(_validationEditContext!.Invalid || _paymentSending)">
                        @if (_paymentSending)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Send payment</span>
                        }
                    </button>
                </ValidationEditContext>

                <article class="my-5">
                    <h4 class="mb-4">Payments</h4>
                    <LightningPaymentList Payments="_payments" Rate="@Rate" Currency="@DisplayCurrency" Loading="@(PaymentsManager == null)" OnCancelClick="payment => Cancel(payment)" OnToggleDisplayCurrency="ToggleDisplayCurrency"/>
                </article>
                <button class="btn btn-outline-primary" type="button" @onclick="FetchData">Refresh data</button>
            }
            else
            {
                <LightningNodeStateAlert NodeState="State.Value.LightningNodeState" ConnectionState="State.Value.ConnectionState"/>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private SendModel Model { get; set; } = new();

    private ValidationEditContext? _validationEditContext;
    private List<AppLightningPayment>? _payments;
    private string? _successMessage;
    private string? _errorMessage;
    private bool _paymentSending;
    private LDKNode? Node => LightningNodeManager.Node;
    private PaymentsManager? PaymentsManager => LightningNodeManager.Node?.PaymentsManager;
    private readonly SemaphoreSlim _semaphore = new(1, 1);
    private string DisplayCurrency => UIState.Value.DisplayCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private MoneyUnit UnitMoney => DisplayCurrency == CurrencyDisplay.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;

    private class SendModel
    {
        [Required]
        public string? PaymentRequest { get; set; }
        public decimal? Amount { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchData();
    }

    private async Task FetchData()
    {
        if (PaymentsManager is null) return;
        await Wrap(async () =>
        {
            var list = await PaymentsManager.List(payments => payments.Where(p => !p.Inbound));
            _payments = list.OrderByDescending(p => p.Timestamp).ToList();
        });
    }

    private async void SendPayment()
    {
        if (Node is null || PaymentsManager is null || string.IsNullOrEmpty(Model.PaymentRequest)) return;
        _successMessage = _errorMessage = null;
        _paymentSending = true;
        await Wrap(async () =>
        {
            try
            {
                var invoice = BOLT11PaymentRequest.Parse(Model.PaymentRequest, Node.Network);
                var result = await PaymentsManager.PayInvoice(invoice, Model.Amount is null ? null : LightMoney.Satoshis((long)Model.Amount.Value));
                _successMessage = $"Payment {result.PaymentId} sent with status {result.Status}";
                Model = new SendModel();
            }
            catch (Exception e)
            {
                _errorMessage = $"Error: {e.Message}";
            }
        });
        _paymentSending = false;
        await FetchData();
    }

    private async Task Cancel(AppLightningPayment payment)
    {
        if (PaymentsManager is null) return;
        await Wrap(async () =>
        {
            await PaymentsManager.Cancel(payment);
        });
        await FetchData();
    }

    private async Task Wrap(Func<Task> action)
    {
        if (PaymentsManager is null) return;
        try
        {
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();
            await action();
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
            _semaphore.Release();
        }
    }

    private void ToggleDisplayCurrency()
    {
        Dispatcher.Dispatch(new UIState.ToggleDisplayCurrency());
    }
}
