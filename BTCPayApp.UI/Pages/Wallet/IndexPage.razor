@attribute [Route(Routes.WalletFunds)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Data
@using BTCPayApp.UI.Components.Layout
@using NBitcoin
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IJSRuntime JS
@inject IState<RootState> State
@inject NavigationManager NavigationManager
@inject OnChainWalletManager OnChainWalletManager
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
        <SectionContent SectionId="Titlebar.End">
            <NavLink class="btn-icon" href="@Routes.WalletSettings">
                <Icon Symbol="settings"/>
            </NavLink>
        </SectionContent>
    </Titlebar>
</SectionContent>

<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            @if (!OnChainWalletManager.IsActive)
            {
                <WalletStateAlert WalletState="State.Value.OnchainWalletState" ConnectionState="State.Value.ConnectionState" />
            }
            else
            {
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <Alert Type="danger" Dismissible>@ErrorMessage</Alert>
                }

                <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                    <h2 class="mb-0">Coins</h2>
                    @if (_totalBalance != null)
                    {
                        <span class="badge bg-info ms-2">
                            <AmountDisplay Sats="_totalBalance.Satoshi" Rate="@Rate" Currency="@DisplayCurrency" OnChangeDisplayCurrency="ToggleDisplayCurrency"/> total
                        </span>
                    }
                </header>
                @if (_utxos?.Any() is true)
                {
                    <div class="box">
                        <ul class="list-group list-group-flush">
                            @foreach (var utxo in _utxos)
                            {
                                <li class="list-group-item py-2">
                                    <AmountDisplay Sats="utxo.TxOut.Value.Satoshi" Rate="@Rate" Currency="@DisplayCurrency" OnChangeDisplayCurrency="ToggleDisplayCurrency"/>
                                </li>
                            }
                        </ul>
                    </div>
                }
                else
                {
                    <div class="box py-4 text-center">
                        @if (_loading)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <p class="text-muted">There are no UTXOs, yet.</p>
                        }
                    </div>
                }

                <h2>Transactions</h2>
                @if (TxGroups?.Any() is true)
                {
                    <div class="transactions-list mb-l">
                        @foreach (var txGroup in TxGroups)
                        {
                            <h3 class="mb-2">@txGroup.Key</h3>
                            foreach (var tx in txGroup.Value)
                            {
                                <div class="box">
                                    <div class="d-flex flex-wrap align-items-center justify-content-between gap-2">
                                        <span class="text-end fw-semibold" @onclick="ToggleDisplayCurrency">
                                            <AmountDisplay Sats="new Money(tx.BalanceChange, MoneyUnit.BTC).Satoshi" Rate="@Rate" Currency="@DisplayCurrency" OnChangeDisplayCurrency="ToggleDisplayCurrency"/>
                                        </span>
                                        <TruncateCenter Text="@tx.TransactionId" class="truncate-center-id" Copy/>
                                        <span class="text-muted">
                                            <DateDisplay DateTimeOffset="@tx.Timestamp"/>
                                        </span>
                                        <span class="badge bg-info">
                                            @tx.Confirmations confs
                                        </span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="box py-4 text-center">
                        @if (_loading)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <p class="text-muted">There are no transactions, yet.</p>
                        }
                    </div>
                }

                @if (_totalBalance?.ToDecimal(MoneyUnit.Satoshi) is > 0 && Model != null)
                {
                    <h2>Send Bitcoin</h2>
                    <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="Transact" SuccessMessage="@SuccessMessage" ErrorMessage="@ErrorMessage">
                        <DataAnnotationsValidator/>
                        <fieldset class="box">
                            <div class="form-group">
                                <label for="Destination" class="form-label" data-required>Destination</label>
                                <div class="d-flex gap-2">
                                    <InputText @bind-Value="Model.Destination" id="Destination" class="form-control flex-grow-1" placeholder="Bitcoin address"/>
                                    <button type="button" class="btn btn-secondary px-3" data-testid="ScanButton" data-bs-toggle="modal" data-bs-target="#ScanQrCodeModal">
                                        <Icon Symbol="scan-qr"/>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => Model.Destination)"/>
                            </div>
                            <div class="form-group">
                                <label for="Amount" class="form-label" data-required>Amount</label>
                                <InputAmount Id="Amount" @bind-Value="Model.Amount" Unit="@UnitMoney" Rate="@Rate" Currency="@Currency" Max="@_totalBalance.ToDecimal(UnitMoney)" OnToggleDisplayCurrency="ToggleDisplayCurrency"/>
                                <ValidationMessage For="@(() => Model.Amount)"/>
                            </div>
                            @if (Model.Transaction is null)
                            {
                                <button type="submit" class="btn btn-primary w-100" disabled="@(_validationEditContext!.Invalid || Sending)">
                                    @if (Sending)
                                    {
                                        <LoadingIndicator/>
                                    }
                                    else
                                    {
                                        <span>Create transaction</span>
                                    }
                                </button>
                            }
                            else
                            {
                                <pre>@Model.Transaction.Value.Tx.ToString()</pre>
                                <button type="submit" class="btn btn-primary w-100" disabled="@(_validationEditContext!.Invalid || Sending)">
                                    @if (Sending)
                                    {
                                        <LoadingIndicator/>
                                    }
                                    else
                                    {
                                        <span>Broadcast transaction</span>
                                    }
                                </button>
                                <button type="button" class="btn btn-outline-secondary w-100 mt-2" disabled="@(Sending)" @onclick="CancelTx">
                                    @if (Sending)
                                    {
                                        <LoadingIndicator/>
                                    }
                                    else
                                    {
                                        <span>Cancel transaction</span>
                                    }
                                </button>
                            }
                        </fieldset>
                    </ValidationEditContext>
                    <QrScanModal OnScan="@OnQrCodeScan"/>
                }

                <h2>Receive Bitcoin</h2>
                <div class="box">
                    @if (!string.IsNullOrEmpty(_address))
                    {
                        <div class="form-floating form-group">
                            <TruncateCenter Text="@_address" Padding="15" Copy="true" class="form-control-plaintext"/>
                            <label>Bitcoin Address</label>
                        </div>
                        <QrCode Data="@_address" class="mb-3"/>
                    }
                    <button type="button" class="btn btn-primary w-100" @onclick="GetAddress" disabled="@_gettingAddress">
                        @if (_gettingAddress)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Get onchain address</span>
                        }
                    </button>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private bool _loading;
    private bool _gettingAddress;
    private Money? _totalBalance;
    private string? _address;
    private string? _qrInput;
    private Dictionary<string, TxResp[]>? _txs;
    private IEnumerable<ICoin>? _utxos;

    private bool Sending { get; set; }
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }
    private ValidationEditContext? _validationEditContext;
    private Network? _network;
    private SendModel? Model { get; set; } = new();

    private string GetTitle() => $"{_network?.Name ?? ""} Onchain Wallet".Trim();
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private string DisplayCurrency => UIState.Value.DisplayCurrency;
    private MoneyUnit UnitMoney => DisplayCurrency == CurrencyDisplay.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;
    private IEnumerable<KeyValuePair<string, TxResp[]>>? TxGroups => _txs?.Where(txGroup => txGroup.Value.Any());

    private class SendModel
    {
        [Required]
        public string? Destination { get; set; }
        [Required]
        public decimal? Amount { get; set; }

        public (Transaction Tx, ICoin[] SpentCoins, BitcoinAddress Change)? Transaction { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (await OnChainWalletManager.CanConfigureWallet())
        {
            NavigationManager.NavigateTo(Routes.WalletSettings);
        }
        else
        {
            _ = FetchData();
        }
    }

    private async Task FetchData()
    {
        if (_loading || Sending) return;
        _loading = true;
        ErrorMessage = null;
        await InvokeAsync(StateHasChanged);
        try
        {
            _utxos = (await OnChainWalletManager.GetUTXOS()).OfType<OnChainWalletManager.CoinWithKey>();
            _totalBalance = _utxos?.Sum(utxo => utxo.TxOut.Value);
            _txs = await OnChainWalletManager.GetTransactions();
            _network = (await OnChainWalletManager.GetConfig())?.NBitcoinNetwork;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetAddress()
    {
        if (_gettingAddress) return;
        _gettingAddress = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            var script = await OnChainWalletManager.DeriveScript(WalletDerivation.NativeSegwit);
            _address = script?.ToString();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            _gettingAddress = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Transact()
    {
        if (_loading || Sending) return;
        if (Model?.Transaction == null)
            await CreateTx();
        else
            await BroadcastTx();
    }

    private async Task CancelTx()
    {
        if (Model?.Transaction is null) return;

        Model.Transaction = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateTx()
    {
        if (_totalBalance is null || Model?.Amount is <= 0 || string.IsNullOrWhiteSpace(Model?.Destination) || _network is null) return;
        Sending = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            var amount = new Money(Model.Amount!.Value, MoneyUnit.Satoshi).ToUnit(MoneyUnit.BTC);
            var txout = new TxOut(Money.Coins(amount), BitcoinAddress.Create(Model.Destination, _network));
            Model.Transaction = await OnChainWalletManager.CreateTransaction([txout], null);
            if (Model.Transaction is null)
                throw new Exception("Transaction creation failed");
            var changeAmt = Model.Transaction.Value.Tx.Outputs
                .Where(o => o.IsTo(Model.Transaction.Value.Change))
                .Sum(o => o.Value.ToDecimal(MoneyUnit.BTC));
            var feeaMT = Model.Transaction.Value.Tx.GetFee(Model.Transaction.Value.SpentCoins).ToDecimal(MoneyUnit.BTC);
            SuccessMessage = $"Created transaction {Model.Transaction.Value.Tx.GetHash()} spending {Model.Transaction.Value.SpentCoins.Sum(c => c.TxOut.Value.ToDecimal(MoneyUnit.BTC))} BTC, with change of {changeAmt} BTC and fee of {feeaMT} BTC";
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            Model.Transaction = null;
        }
        finally
        {
            Sending = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task BroadcastTx()
    {
        if (Model?.Transaction is null) return;
        Sending = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            await OnChainWalletManager.BroadcastTransaction(Model.Transaction.Value.Tx);
            SuccessMessage = $"Transaction {Model.Transaction.Value.Tx.GetHash()} broadcasted";
            Model = new SendModel();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            Sending = false;
            await InvokeAsync(StateHasChanged);
        }
        _ = FetchData();
    }

    private void ToggleDisplayCurrency()
    {
        if (Model?.Amount.HasValue is true)
            Model.Amount = new Money(Model.Amount.Value, UnitMoney).ToDecimal(UnitMoney == MoneyUnit.Satoshi
                ? MoneyUnit.BTC
                : MoneyUnit.Satoshi);
        Dispatcher.Dispatch(new UIState.ToggleDisplayCurrency());
    }

    private async void OnQrCodeScan(string code)
    {
        // prevent duplicate submission due to quirk in QR reader lib
        if (code == _qrInput) return;
        _qrInput = code;
        await JS.InvokeVoidAsync("Interop.closeModal", "#ScanQrCodeModal");

        Model!.Destination = code;
        StateHasChanged();
    }
}
